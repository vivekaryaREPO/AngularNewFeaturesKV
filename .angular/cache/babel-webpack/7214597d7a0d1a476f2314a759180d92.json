{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseUrl = 'http://localhost:3000/employees';\n    }\n\n    getEmployees() {\n      return this.httpClient.get(this.baseUrl).pipe(catchError(this.handleError));\n    }\n\n    handleError(errorResponse) {\n      if (errorResponse.error instanceof ErrorEvent) {\n        console.error('Client Side Error :', errorResponse.error.message);\n      } else {\n        console.error('Server Side Error :', errorResponse);\n      }\n\n      return throwError(() => 'There is a problem with the service. We are notified & working on it. Please try again later.');\n    }\n\n    getEmployee(id) {\n      return this.httpClient.get(`${this.baseUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n\n    addEmployee(employee) {\n      return this.httpClient.post(this.baseUrl, employee, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(catchError(this.handleError));\n    }\n\n    updateEmployee(employee) {\n      return this.httpClient.put(`${this.baseUrl}/${employee.id}`, employee, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(catchError(this.handleError));\n    }\n\n    deleteEmployee(id) {\n      return this.httpClient.delete(`${this.baseUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n\n  }\n\n  EmployeeService.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac\n  });\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module"}