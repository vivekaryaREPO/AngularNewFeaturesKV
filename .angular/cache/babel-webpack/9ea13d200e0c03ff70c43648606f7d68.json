{"ast":null,"code":"import { FormGroup, Validators, FormArray, FormControl } from '@angular/forms';\nimport { CustomValidators } from '../shared/custom.validator';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../employee/employee.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction CreateEmployeeComponent_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.formError == null ? null : ctx_r0.formError[\"fullName\"]);\n  }\n}\n\nfunction CreateEmployeeComponent_span_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.formError == null ? null : ctx_r1.formError[\"email\"]);\n  }\n}\n\nfunction CreateEmployeeComponent_span_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", (ctx_r2.formError == null ? null : ctx_r2.formError[\"confirmEmail\"]) ? ctx_r2.formError == null ? null : ctx_r2.formError[\"confirmEmail\"] : ctx_r2.formError == null ? null : ctx_r2.formError[\"emailGroup\"], \" \");\n  }\n}\n\nfunction CreateEmployeeComponent_span_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.formError == null ? null : ctx_r3.formError[\"phone\"]);\n  }\n}\n\nfunction CreateEmployeeComponent_div_48_div_5_hr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"hr\");\n  }\n}\n\nfunction CreateEmployeeComponent_div_48_div_5_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function CreateEmployeeComponent_div_48_div_5_div_6_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const i_r7 = i0.ɵɵnextContext().index;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.removeSkillButtonClick(i_r7);\n    });\n    i0.ɵɵtext(2, \" Delete Skill \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateEmployeeComponent_div_48_div_5_span_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \" required \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateEmployeeComponent_div_48_div_5_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \" required \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateEmployeeComponent_div_48_div_5_span_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1, \" required \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CreateEmployeeComponent_div_48_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, CreateEmployeeComponent_div_48_div_5_hr_1_Template, 1, 0, \"hr\", 9);\n    i0.ɵɵelementStart(2, \"div\", 16);\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4, \" Skill Name: \");\n    i0.ɵɵelement(5, \"input\", 17);\n    i0.ɵɵtemplate(6, CreateEmployeeComponent_div_48_div_5_div_6_Template, 3, 0, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\");\n    i0.ɵɵtemplate(8, CreateEmployeeComponent_div_48_div_5_span_8_Template, 2, 0, \"span\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\");\n    i0.ɵɵelement(10, \"br\");\n    i0.ɵɵtext(11, \" Experience In Years: \");\n    i0.ɵɵelementStart(12, \"input\", 18);\n    i0.ɵɵlistener(\"blur\", function CreateEmployeeComponent_div_48_div_5_Template_input_blur_12_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.logValidationErrors();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\");\n    i0.ɵɵtemplate(14, CreateEmployeeComponent_div_48_div_5_span_14_Template, 2, 0, \"span\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"br\");\n    i0.ɵɵelementStart(16, \"div\");\n    i0.ɵɵelementStart(17, \"label\");\n    i0.ɵɵtext(18, \"PROFICIENCY\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(19, \"input\", 19);\n    i0.ɵɵelementStart(20, \"label\");\n    i0.ɵɵtext(21, \"Beginner\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"input\", 20);\n    i0.ɵɵelementStart(23, \"label\");\n    i0.ɵɵtext(24, \"Intermediate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(25, \"input\", 21);\n    i0.ɵɵelementStart(26, \"label\");\n    i0.ɵɵtext(27, \"Professional\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\");\n    i0.ɵɵtemplate(29, CreateEmployeeComponent_div_48_div_5_span_29_Template, 2, 0, \"span\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const skill_r6 = ctx.$implicit;\n    const i_r7 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    let tmp_4_0;\n    let tmp_5_0;\n    let tmp_6_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r7 > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r7);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"id\", \"skillName\" + i_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.getFormArrayLength() > 1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = skill_r6.get(\"skillName\")) == null ? null : tmp_4_0.errors == null ? null : tmp_4_0.errors[\"required\"]) && ((tmp_4_0 = skill_r6.get(\"skillName\")) == null ? null : tmp_4_0.touched));\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = skill_r6.get(\"experienceInYears\")) == null ? null : tmp_5_0.errors == null ? null : tmp_5_0.errors[\"required\"]) && ((tmp_5_0 = skill_r6.get(\"experienceInYears\")) == null ? null : tmp_5_0.touched));\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_6_0 = skill_r6.get(\"proficiency\")) == null ? null : tmp_6_0.errors == null ? null : tmp_6_0.errors[\"required\"]) && ((tmp_6_0 = skill_r6.get(\"proficiency\")) == null ? null : tmp_6_0.touched));\n  }\n}\n\nfunction CreateEmployeeComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵelementStart(3, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CreateEmployeeComponent_div_48_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.addSkillButtonClick();\n    });\n    i0.ɵɵtext(4, \"Add New Skill\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, CreateEmployeeComponent_div_48_div_5_Template, 30, 7, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"disabled\", (tmp_0_0 = ctx_r4.employeeForm.get(\"skills\")) == null ? null : tmp_0_0.invalid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.test().controls);\n  }\n}\n\nexport let CreateEmployeeComponent = /*#__PURE__*/(() => {\n  class CreateEmployeeComponent {\n    constructor(fb, _activatedRoute, _employeeService) {\n      this.fb = fb;\n      this._activatedRoute = _activatedRoute;\n      this._employeeService = _employeeService;\n      this.employeeForm = new FormGroup({});\n      this.fullNameLength = 0;\n      this.validationMessages = {\n        'fullName': {\n          'required': 'Full Name is required.',\n          'minlength': 'Full Name must be greater than 5 characters.',\n          'maxlength': 'Full Name must be less than 10 characters.'\n        },\n        'email': {\n          'required': 'Email is required.',\n          'emailDomain': 'Email domain should be dell.com'\n        },\n        'confirmEmail': {\n          'required': 'Email is required.',\n          'emailDomain': 'Email domain should be dell.com'\n        },\n        'emailGroup': {\n          'emailMismatch': 'Email and confirm emails do not match'\n        },\n        'phone': {\n          'required': 'Phone is required.'\n        } // },\n        // 'skillName': {\n        //   'required': 'Skill Name is required.',\n        // },\n        // 'experienceInYears': {\n        //   'required': 'Experience is required.',\n        // },\n        // 'proficiency': {\n        //   'required': 'Proficiency is required.',\n        // },\n\n      };\n      this.formError = {// 'fullName':'',\n        // 'email':'',\n        // 'confirmEmail':'',\n        // 'emailGroup':'',\n        // 'phone':'',\n        // 'skillName':'',\n        // 'experienceInYears':'',\n        // 'proficiency':''\n      };\n    }\n\n    ngOnInit() {\n      // this.employeeForm=new FormGroup(\n      //   {\n      //     fullName: new FormControl(),\n      //     email:new FormControl(),\n      //     skills:new FormGroup({\n      //       skillName:new FormControl(),\n      //       experienceInYears:new FormControl(),\n      //       proficiency:new FormControl()\n      //     })\n      var _a, _b; //   }\n      // );\n\n\n      this.employeeForm = this.fb.group({\n        fullName: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(10)]],\n        emailGroup: this.fb.group({\n          email: ['', [Validators.required, CustomValidators.emailDomainWithParameter('dell.com')]],\n          confirmEmail: ['', [Validators.required, CustomValidators.emailDomainWithParameter('dell.com')]]\n        }, {\n          validator: matchEmail\n        }),\n        contactPreference: ['email'],\n        phone: [''],\n        skills: this.fb.array([this.addSkillFormGroup()]) // when form loads, we wanna at least one form group so we called the function. \n\n      }); // this.employeeForm.valueChanges.subscribe((value:any)=>{\n      //   console.log(JSON.stringify(value));\n      // });\n\n      (_a = this.employeeForm.get('fullName')) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(value => {\n        this.fullNameLength = value.length;\n      });\n      this.employeeForm.valueChanges.subscribe(data => {\n        this.logValidationErrors(this.employeeForm);\n      });\n      (_b = this.employeeForm.get('contactPreference')) === null || _b === void 0 ? void 0 : _b.valueChanges.subscribe(value => {\n        this.onContactPrefrenceChange(value);\n      });\n\n      this._activatedRoute.paramMap.subscribe(params => {\n        const empId = Number(params.get('id'));\n\n        if (empId) {\n          this.getEmployee(empId);\n        }\n      });\n    }\n\n    getEmployee(id) {\n      this._employeeService.getEmployee(id).subscribe(employee => {\n        this.editEmployee(employee);\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    editEmployee(employee) {\n      this.employeeForm.patchValue({\n        fullName: employee.fullName,\n        contactPreference: employee.contactPreference,\n        emailGroup: {\n          email: employee.email,\n          confirmEmail: employee.email\n        },\n        phone: employee.phone\n      });\n      this.employeeForm.setControl('skills', this.setExistingSkills(employee.skills));\n    }\n\n    setExistingSkills(skillSets) {\n      const formArray = new FormArray([]);\n      skillSets.forEach(s => {\n        formArray.push(this.fb.group({\n          skillName: s.skillName,\n          experienceInYears: s.experienceInYears,\n          proficiency: s.proficiency\n        }));\n      });\n      return formArray;\n    }\n\n    test() {\n      var _a;\n\n      let test = (_a = this.employeeForm.get('skills')) === null || _a === void 0 ? void 0 : _a.invalid;\n      return this.employeeForm.get('skills');\n    }\n\n    addSkillButtonClick() {\n      this.employeeForm.get('skills').push(this.addSkillFormGroup());\n    }\n\n    onSubmit() {\n      console.log(this.employeeForm); // console.log(this.employeeForm.controls['fullName'].touched);\n      // console.log(this.employeeForm.controls['fullName'].value);\n      // console.log(this.employeeForm.controls['email'].touched);\n      // console.log(this.employeeForm.controls['email'].value);\n    }\n\n    oNLoadDataClick() {\n      // this.employeeForm.setValue(\n      //   {\n      //     fullName:\"Vvek\" ,\n      //     email:\"b@b.com\",\n      //     skills:{\n      //       skillName:\"c#\",\n      //       experienceInYears:\"java\",\n      //       proficiency:\"beginner\"\n      //     }\n      //   }\n      // );\n      // this.logValidationErrors(this.employeeForm);\n      // console.log(this.formError);\n      //1. first way to create formArray. Its used for creating elements dynamically\n      const formArray = new FormArray([new FormControl('John', Validators.required), new FormGroup({\n        country: new FormControl('', Validators.required)\n      }), new FormArray([])]);\n      console.log(formArray.length);\n\n      for (const control of formArray.controls) {\n        if (control instanceof FormControl) {\n          console.log('control is FormControl');\n        }\n\n        if (control instanceof FormGroup) {\n          console.log('control is FormGroup');\n        }\n\n        if (control instanceof FormArray) {\n          console.log('control is FormArray');\n        }\n      } //2nd way to create formArray i.e using formBuilder class.\n      //this is to create array of formcontrol\n\n\n      const formArray1 = this.fb.array([new FormControl('John', Validators.required), new FormControl('IT', Validators.required), new FormControl('', Validators.required)]);\n      console.log(formArray1.value);\n      console.log(formArray1.valid); //if one element is false, all become false, so we keep only alike items in formArray.\n\n      formArray1.push(new FormControl('Mark')); //2nd way to create formArray i.e using formBuilder class.\n      //this is to create array of formGroup\n\n      const formArray2 = this.fb.group([new FormControl('John', Validators.required), new FormControl('IT', Validators.required), new FormControl('', Validators.required)]);\n      console.log(formArray2.value);\n      console.log(formArray2.valid); //if one element is false, all become false, so we keep only alike items in formArray.\n    }\n\n    onContactPrefrenceChange(phone) {\n      var _a, _b, _c, _d, _e, _f;\n\n      if (phone === 'phone') {\n        //use array to set multiple validators\n        (_a = this.employeeForm.get('phone')) === null || _a === void 0 ? void 0 : _a.setValidators(Validators.required);\n        (_b = this.employeeForm.get('email')) === null || _b === void 0 ? void 0 : _b.clearValidators();\n      } else {\n        (_c = this.employeeForm.get('phone')) === null || _c === void 0 ? void 0 : _c.clearValidators();\n        (_d = this.employeeForm.get('email')) === null || _d === void 0 ? void 0 : _d.setValidators([Validators.required]);\n      }\n\n      (_e = this.employeeForm.get('phone')) === null || _e === void 0 ? void 0 : _e.updateValueAndValidity();\n      (_f = this.employeeForm.get('email')) === null || _f === void 0 ? void 0 : _f.updateValueAndValidity();\n    }\n\n    logValidationErrors(group = this.employeeForm) {\n      console.log(Object.keys(group.controls).forEach(key => {\n        const abstractControl = group.get(key); // abstractControl?.disable();\n        // abstractControl?.markAsDirty();\n        // console.log(\"key: \"+key+\"    value=\"+abstractControl?.value);\n        // console.log(abstractControl?.dirty);\n\n        this.formError[key] = '';\n\n        if (abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty || abstractControl.value !== '')) {\n          const messages = this.validationMessages[key];\n          console.log(messages);\n\n          for (const errorKey in abstractControl.errors) {\n            if (errorKey) {\n              this.formError[key] += messages[errorKey] + ' ';\n            }\n          }\n        }\n\n        if (abstractControl instanceof FormGroup) {\n          this.logValidationErrors(abstractControl);\n        } //we dont need this as we have shifted the error display logic to the front end, for our dynamic form array\n        // if(abstractControl instanceof FormArray)\n        // {\n        //   for(const control of abstractControl.controls)\n        //   {\n        //     if(control instanceof FormGroup)\n        //     this.logValidationErrors(control);\n        //   }\n        // }\n        //we don't need else block anymore because the emails don't match error will be added to errors collection of emailGroup\n        // else\n        // {\n        //   this.formError[key]='';\n        //   // abstractControl?.disable();\n        //   // abstractControl?.markAsDirty();\n        //   // console.log(\"key: \"+key+\"    value=\"+abstractControl?.value);\n        //   // console.log(abstractControl?.dirty);\n        //   if(abstractControl && !abstractControl.valid && (abstractControl.touched || abstractControl.dirty))\n        //   {\n        //     const messages=this.validationMessages[key];\n        //     console.log(messages);\n        //     for(const errorKey in abstractControl.errors)\n        //     {\n        //       if(errorKey)\n        //       {\n        //         this.formError[key]+=messages[errorKey]+' ';\n        //       }\n        //     }\n        //   }\n        // }\n\n      }));\n    }\n\n    getFormArrayLength() {\n      return this.employeeForm.get('skills').length;\n    }\n\n    addSkillFormGroup() {\n      return this.fb.group({\n        skillName: ['', Validators.required],\n        experienceInYears: ['', Validators.required],\n        proficiency: ['', Validators.required]\n      });\n    }\n\n    removeSkillButtonClick(skillGroupIndex) {\n      //we wanna mark the form touched and dirty \n      const skillsFormArray = this.employeeForm.get('skills');\n      skillsFormArray.removeAt(skillGroupIndex);\n      skillsFormArray.markAsDirty();\n      skillsFormArray.markAsTouched();\n    }\n\n  }\n\n  CreateEmployeeComponent.ɵfac = function CreateEmployeeComponent_Factory(t) {\n    return new (t || CreateEmployeeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.EmployeeService));\n  };\n\n  CreateEmployeeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateEmployeeComponent,\n    selectors: [[\"app-create-employee\"]],\n    decls: 58,\n    vars: 8,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"id\", \"fullName\", \"type\", \"text\", \"formControlName\", \"fullName\", 3, \"blur\"], [\"style\", \"color: red;\", 4, \"ngIf\"], [\"id\", \"contactPreference\", \"type\", \"radio\", \"formControlName\", \"contactPreference\", \"value\", \"phone\", 3, \"click\"], [\"id\", \"contactPreference\", \"type\", \"radio\", \"formControlName\", \"contactPreference\", \"value\", \"email\", 3, \"click\"], [\"div\", \"\", \"formGroupName\", \"emailGroup\"], [\"id\", \"email\", \"type\", \"text\", \"formControlName\", \"email\", 3, \"blur\"], [\"id\", \"confirmEmail\", \"type\", \"text\", \"formControlName\", \"confirmEmail\", 3, \"blur\"], [\"id\", \"email\", \"type\", \"text\", \"formControlName\", \"phone\", 3, \"blur\"], [4, \"ngIf\"], [\"type\", \"submit\", 3, \"disabled\"], [3, \"click\"], [2, \"color\", \"red\"], [3, \"disabled\", \"click\"], [\"formArrayName\", \"skills\", 4, \"ngFor\", \"ngForOf\"], [\"formArrayName\", \"skills\"], [3, \"formGroupName\"], [\"type\", \"text\", \"formControlName\", \"skillName\", 3, \"id\"], [\"type\", \"text\", \"id\", \"experienceInYears\", \"formControlName\", \"experienceInYears\", 3, \"blur\"], [\"id\", \"beginner\", \"type\", \"radio\", \"formControlName\", \"proficiency\", \"value\", \"beginner\"], [\"id\", \"beginner\", \"type\", \"radio\", \"formControlName\", \"proficiency\", \"value\", \"intermediate\"], [\"id\", \"beginner\", \"type\", \"radio\", \"formControlName\", \"proficiency\", \"value\", \"professional\"]],\n    template: function CreateEmployeeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateEmployeeComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"table\");\n        i0.ɵɵelementStart(2, \"tr\");\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵelementStart(4, \"td\");\n        i0.ɵɵtext(5, \"Full Name:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"td\");\n        i0.ɵɵelementStart(7, \"input\", 1);\n        i0.ɵɵlistener(\"blur\", function CreateEmployeeComponent_Template_input_blur_7_listener() {\n          return ctx.logValidationErrors();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, CreateEmployeeComponent_span_8_Template, 3, 1, \"span\", 2);\n        i0.ɵɵelementStart(9, \"span\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelementStart(12, \"tr\");\n        i0.ɵɵelementStart(13, \"td\");\n        i0.ɵɵelementStart(14, \"div\");\n        i0.ɵɵelementStart(15, \"label\");\n        i0.ɵɵtext(16, \"Contact Preference:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 3);\n        i0.ɵɵlistener(\"click\", function CreateEmployeeComponent_Template_input_click_17_listener() {\n          return ctx.onContactPrefrenceChange(\"phone\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"label\");\n        i0.ɵɵtext(19, \"Phone\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"input\", 4);\n        i0.ɵɵlistener(\"click\", function CreateEmployeeComponent_Template_input_click_20_listener() {\n          return ctx.onContactPrefrenceChange(\"email\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"label\");\n        i0.ɵɵtext(22, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"br\");\n        i0.ɵɵelementStart(24, \"tr\");\n        i0.ɵɵelementStart(25, \"div\", 5);\n        i0.ɵɵelementStart(26, \"div\");\n        i0.ɵɵelementStart(27, \"td\");\n        i0.ɵɵtext(28, \"Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"td\");\n        i0.ɵɵelementStart(30, \"input\", 6);\n        i0.ɵɵlistener(\"blur\", function CreateEmployeeComponent_Template_input_blur_30_listener() {\n          return ctx.logValidationErrors();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(31, CreateEmployeeComponent_span_31_Template, 3, 1, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\");\n        i0.ɵɵelementStart(33, \"td\");\n        i0.ɵɵtext(34, \"confirm Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"td\");\n        i0.ɵɵelementStart(36, \"input\", 7);\n        i0.ɵɵlistener(\"blur\", function CreateEmployeeComponent_Template_input_blur_36_listener() {\n          return ctx.logValidationErrors();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(37, CreateEmployeeComponent_span_37_Template, 3, 1, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\");\n        i0.ɵɵelementStart(39, \"td\");\n        i0.ɵɵtext(40, \"Phone:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"td\");\n        i0.ɵɵelementStart(42, \"input\", 8);\n        i0.ɵɵlistener(\"blur\", function CreateEmployeeComponent_Template_input_blur_42_listener() {\n          return ctx.logValidationErrors();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(43, CreateEmployeeComponent_span_43_Template, 3, 1, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(44, \"br\");\n        i0.ɵɵelement(45, \"br\");\n        i0.ɵɵelementStart(46, \"tr\");\n        i0.ɵɵelementStart(47, \"td\");\n        i0.ɵɵtemplate(48, CreateEmployeeComponent_div_48_Template, 6, 2, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(49, \"br\");\n        i0.ɵɵelementStart(50, \"tr\");\n        i0.ɵɵelementStart(51, \"td\");\n        i0.ɵɵelementStart(52, \"button\", 10);\n        i0.ɵɵtext(53, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"td\");\n        i0.ɵɵelementStart(55, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function CreateEmployeeComponent_Template_button_click_55_listener() {\n          return ctx.oNLoadDataClick();\n        });\n        i0.ɵɵtext(56, \"Load data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(57, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.employeeForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.formError == null ? null : ctx.formError[\"fullName\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(\"Number of characters:\" + ctx.fullNameLength);\n        i0.ɵɵadvance(21);\n        i0.ɵɵproperty(\"ngIf\", ctx.formError == null ? null : ctx.formError[\"email\"]);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", (ctx.formError == null ? null : ctx.formError[\"confirmEmail\"]) || (ctx.formError == null ? null : ctx.formError[\"emailGroup\"]));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.formError == null ? null : ctx.formError[\"phone\"]);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeForm != null);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", ctx.employeeForm.invalid);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i4.NgIf, i1.RadioControlValueAccessor, i1.FormGroupName, i4.NgForOf, i1.FormArrayName],\n    styles: [\"\"]\n  });\n  return CreateEmployeeComponent;\n})();\n\nfunction emailDomain(control) {\n  const email = control.value;\n  const domainName = email.substring(email.lastIndexOf('@') + 1);\n  if (domainName === '' || domainName === 'arya.com') return null;else return {\n    'emailDomain': true\n  };\n} //closure i.e function returning finction\n// function emailDomainWithParameter(domain:string){\n// return (control:AbstractControl):{[key:string]:any} | null => {\n//   const email:string=control.value;\n//   const domainName:string= email.substring(email.lastIndexOf('@')+1);\n//   if (domainName=== '' || domain.toLowerCase()===domainName.toLowerCase())\n//   return null;\n//   else\n//   return {'emailDomain':true}\n// };}\n\n\nfunction matchEmail(group) {\n  const emailControl = group.get('email');\n  const confirmemailControl = group.get('confirmEmail');\n\n  if ((emailControl === null || emailControl === void 0 ? void 0 : emailControl.value) === (confirmemailControl === null || confirmemailControl === void 0 ? void 0 : confirmemailControl.value) || (confirmemailControl === null || confirmemailControl === void 0 ? void 0 : confirmemailControl.pristine) && confirmemailControl.value === '') {\n    return null;\n  } else {\n    return {\n      'emailMismatch': true\n    }; //this object will be attached to errors collection of emailFormGroup\n  }\n}","map":null,"metadata":{},"sourceType":"module"}